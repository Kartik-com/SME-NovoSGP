pipeline {
  
    agent {
      node { label 'dotnet-5-rc' }
    }

    options {
      buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
      disableConcurrentBuilds()
      skipDefaultCheckout()
    }
  
    stages {

        stage('CheckOut') {            
            steps { checkout scm }            
        }
      
        stage('Sonar') {
          steps {
              withSonarQubeEnv('sonarqube-local'){
                sh 'dotnet-sonarscanner begin /k:"SME-NovoSGP" /d:sonar.cs.opencover.reportsPaths="teste/SME.SGP.TesteIntegracao/coverage.opencover.xml" /d:sonar.coverage.exclusions="**/teste/*.*, SME.SGP.Dados.*/*.*, SME.SGP.Dominio.Interfaces/*.*, SME.SGP.Api/*.*, SME.SGP.Infra*/*.*, SME.SGP.IoC/*.*, *Worker*/*, *Hub*/*"'
                sh 'dotnet build SME.SGP.sln'
                sh 'dotnet test teste/SME.SGP.TesteIntegracao --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'
                sh 'dotnet-sonarscanner'
              }
            }
       }       
    }
  }
