pipeline {  
    options {
      buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
      disableConcurrentBuilds()
      skipDefaultCheckout()
    }

  agent none
    stages {
            stage('Checkout') {
                agent { label "sme" }
                steps {
                    script {
                     def nodes = nodesByLabel label: 'jenkinsnodes'
                     nodes = nodes.sort()

                        Map tasks = [:]
                        
                        for (int i = 0; i < nodes.size(); i++) {
                            def label = nodes[i]
                            def stageName = "Checkout ${nodes[i]}"
                            tasks[label] = {
                                node(label) {
                                    stage(stageName) {
                                      checkout scm
                                    }
                                }
                            }
                        }
                        
                        timeout(time: 3, unit: 'MINUTES') {
                            parallel(tasks)
                        }
                    }
                }
            }

          stage('Build do Projeto'){
            agent { kubernetes {
               label 'dotnet5-sonar'
               defaultContainer 'dotnet5-sonar'
              }
            }
            steps{
              script{
                  def jobName = URLDecoder.decode(env.JOB_NAME, 'UTF-8').replaceAll('/', '_')
                  def sourceDir = "/home/jenkins/agent/temp/${jobName}"
                  sh "cp -r ${sourceDir}/* ${env.WORKSPACE}"
                  sh 'dotnet build SME.SGP.sln'
                  //stash includes: "**/*" , name: "bintestes"
                  sh "tar cf - . | pigz > bintestes.tar.gz"
                  stash includes: "bintestes.tar.gz" , name: "bintestes"
                  sh "ls -ltra"
                  }
               }
            }

        stage('Sonar & Testes') {
        parallel {
          stage('TesteIntegracao & build'){
            agent { kubernetes {
               label 'dotnet5-sonar'
               defaultContainer 'dotnet5-sonar'
              }
            }
            steps{
              script{
                    unstash 'bintestes'
                    sh "unpigz bintestes.tar.gz"
                    sh "tar -xvf bintestes.tar"
                    sh "dotnet restore SME.SGP.sln"
                    sh 'dotnet test teste/SME.SGP.TesteIntegracao --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'
                  }
               }
            }          

          stage('TesteIntegracao.AEE'){
            agent { kubernetes {
               label 'dotnet5-sonar'
               defaultContainer 'dotnet5-sonar'
              }
            }
            steps{
              script{
                    unstash 'bintestes'
                    sh "unpigz bintestes.tar.gz"
                    sh "tar -xvf bintestes.tar"
                    sh "dotnet restore SME.SGP.sln"
                    sh 'dotnet test teste/SME.SGP.TesteIntegracao.AEE --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'
               }
            }
          }

          stage('TesteIntegracao.Aula'){
            agent { kubernetes {
               label 'dotnet5-sonar'
               defaultContainer 'dotnet5-sonar'
              }
            }
            steps{
              script{
                    unstash 'bintestes'
                    sh "unpigz bintestes.tar.gz"
                    sh "tar -xvf bintestes.tar"
                    sh "dotnet restore SME.SGP.sln"
                    sh 'dotnet test teste/SME.SGP.TesteIntegracao.Aula --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'
               }
            }
          }

          stage('TesteIntegracao.Fechamento'){
            agent { kubernetes {
               label 'dotnet5-sonar'
               defaultContainer 'dotnet5-sonar'
              }
            }
            steps{
              script{
                    unstash 'bintestes'
                    sh "unpigz bintestes.tar.gz"
                    sh "tar -xvf bintestes.tar"
                    sh "dotnet restore SME.SGP.sln"
                    sh 'dotnet test teste/SME.SGP.TesteIntegracao.Fechamento --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'
               }
            }
          }

          stage('TesteIntegracao.Frequencia'){
            agent { kubernetes {
               label 'dotnet5-sonar'
               defaultContainer 'dotnet5-sonar'
              }
            }
            steps{
              script{
                    unstash 'bintestes'
                    sh "unpigz bintestes.tar.gz"
                    sh "tar -xvf bintestes.tar"
                    sh "dotnet restore SME.SGP.sln"
                    sh 'dotnet test teste/SME.SGP.TesteIntegracao.Frequencia --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'
               }
            }
          }

          stage('TesteIntegracao.Pendencia'){
            agent { kubernetes {
               label 'dotnet5-sonar'
               defaultContainer 'dotnet5-sonar'
              }
            }
            steps{
              script{
                    unstash 'bintestes'
                    sh "unpigz bintestes.tar.gz"
                    sh "tar -xvf bintestes.tar"
                    sh "dotnet restore SME.SGP.sln"
                    sh 'dotnet test teste/SME.SGP.TesteIntegracao.Pendencia --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'
               }
            }
          }
         }
        }

        stage('Build') {
          parallel {
            stage('sme-sgp-backend') {
              agent { kubernetes { 
                  label 'builder'
                  defaultContainer 'builder'
                }
              }
              steps{
                script {
                  def jobName = URLDecoder.decode(env.JOB_NAME, 'UTF-8').replaceAll('/', '_')
                  def sourceDir = "/home/jenkins/agent/temp/${jobName}"
                  sh "cp -r ${sourceDir}/* ${env.WORKSPACE}"
                  sh "ls -ltra"
                  sh "pwd"
                  sh "hostname"
                  imagename = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/sme-sgp-backend"
                  dockerImage1 = docker.build(imagename, "-f src/SME.SGP.Api/Dockerfile .")
                  } 
                }
              }

            stage('sme-worker-geral') {
              agent { kubernetes { 
                  label 'builder'
                  defaultContainer 'builder'
                }
              }
              steps{
                script {
                  def jobName = URLDecoder.decode(env.JOB_NAME, 'UTF-8').replaceAll('/', '_')
                  def sourceDir = "/home/jenkins/agent/temp/${jobName}"
                  sh "cp -r ${sourceDir}/* ${env.WORKSPACE}"
                  sh "ls -ltra"
                  sh "pwd"
                  sh "hostname"
                  imagename = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/sme-worker-geral"
                  dockerImage2 = docker.build(imagename, "-f src/SME.SGP.Worker.Rabbbit/Dockerfile .")
                  }   
                }
              }

            stage('sme-worker-fechamento') {
              agent { kubernetes { 
                  label 'builder'
                  defaultContainer 'builder'
                }
              }
              steps{
                script {
                  def jobName = URLDecoder.decode(env.JOB_NAME, 'UTF-8').replaceAll('/', '_')
                  def sourceDir = "/home/jenkins/agent/temp/${jobName}"
                  sh "cp -r ${sourceDir}/* ${env.WORKSPACE}"
                  sh "ls -ltra"
                  sh "pwd"
                  sh "hostname"
                  imagename = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/sme-worker-fechamento"
                  dockerImage3 = docker.build(imagename, "-f src/SME.SGP.Fechamento.Worker/Dockerfile .")
                  }   
                }
              }

            stage('sme-worker-aee') {
              agent { kubernetes { 
                  label 'builder'
                  defaultContainer 'builder'
                }
              }
              steps{
                script {
                  def jobName = URLDecoder.decode(env.JOB_NAME, 'UTF-8').replaceAll('/', '_')
                  def sourceDir = "/home/jenkins/agent/temp/${jobName}"
                  sh "cp -r ${sourceDir}/* ${env.WORKSPACE}"
                  sh "ls -ltra"
                  sh "pwd"
                  sh "hostname"
                  imagename = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/sme-worker-aee"
                  dockerImage4 = docker.build(imagename, "-f src/SME.SGP.AEE.Worker/Dockerfile .")
                  }  
                }
              }

            stage('sme-worker-aula') {
              agent { kubernetes { 
                  label 'builder'
                  defaultContainer 'builder'
                }
              }
              steps{
                script {
                  def jobName = URLDecoder.decode(env.JOB_NAME, 'UTF-8').replaceAll('/', '_')
                  def sourceDir = "/home/jenkins/agent/temp/${jobName}"
                  sh "cp -r ${sourceDir}/* ${env.WORKSPACE}"
                  sh "ls -ltra"
                  sh "pwd"
                  sh "hostname"
                  imagename = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/sme-worker-aula"
                  dockerImage5 = docker.build(imagename, "-f src/SME.SGP.Aula.Worker/Dockerfile .")
                  }   
                }
              }

            stage('sme-worker-frequencia') {
              agent { kubernetes { 
                  label 'builder'
                  defaultContainer 'builder'
                }
              }
              steps{
                script {
                  def jobName = URLDecoder.decode(env.JOB_NAME, 'UTF-8').replaceAll('/', '_')
                  def sourceDir = "/home/jenkins/agent/temp/${jobName}"
                  sh "cp -r ${sourceDir}/* ${env.WORKSPACE}"
                  sh "ls -ltra"
                  sh "pwd"
                  sh "hostname"
                  imagename = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/sme-worker-frequencia"
                  dockerImage6 = docker.build(imagename, "-f src/SME.SGP.Frequencia.Worker/Dockerfile .")
                  }   
                }
              }

            stage('sme-worker-institucional') {
              agent { kubernetes { 
                  label 'builder'
                  defaultContainer 'builder'
                }
              }
              steps{
                script {
                  def jobName = URLDecoder.decode(env.JOB_NAME, 'UTF-8').replaceAll('/', '_')
                  def sourceDir = "/home/jenkins/agent/temp/${jobName}"
                  sh "cp -r ${sourceDir}/* ${env.WORKSPACE}"
                  sh "ls -ltra"
                  sh "pwd"
                  sh "hostname"
                  imagename = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/sme-worker-institucional"
                  dockerImage7 = docker.build(imagename, "-f src/SME.SGP.Institucional.Worker/Dockerfile .")
                  }   
                }
              }

            stage('sme-worker-pendencias') {
              agent { kubernetes { 
                  label 'builder'
                  defaultContainer 'builder'
                }
              }
              steps{
                script {
                  def jobName = URLDecoder.decode(env.JOB_NAME, 'UTF-8').replaceAll('/', '_')
                  def sourceDir = "/home/jenkins/agent/temp/${jobName}"
                  sh "cp -r ${sourceDir}/* ${env.WORKSPACE}"
                  sh "ls -ltra"
                  sh "pwd"
                  sh "hostname"
                  imagename = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/sme-worker-pendencias"
                  dockerImage8 = docker.build(imagename, "-f src/SME.SGP.Pendencias.Worker/Dockerfile .")
                  }  
                }
              }

            stage('sme-worker-avaliacao') {
              agent { kubernetes { 
                  label 'builder'
                  defaultContainer 'builder'
                }
              }
              steps{
                script {
                  def jobName = URLDecoder.decode(env.JOB_NAME, 'UTF-8').replaceAll('/', '_')
                  def sourceDir = "/home/jenkins/agent/temp/${jobName}"
                  sh "cp -r ${sourceDir}/* ${env.WORKSPACE}"
                  sh "ls -ltra"
                  sh "pwd"
                  sh "hostname"
                  imagename = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/sme-worker-avaliacao"
                  dockerImage9 = docker.build(imagename, "-f src/SME.SGP.Avaliacao.Worker/Dockerfile .")
                  }  
                }
              }

            stage('sme-worker-auditoria') {
              agent { kubernetes { 
                  label 'builder'
                  defaultContainer 'builder'
                }
              }
              steps{
                script {
                  def jobName = URLDecoder.decode(env.JOB_NAME, 'UTF-8').replaceAll('/', '_')
                  def sourceDir = "/home/jenkins/agent/temp/${jobName}"
                  sh "cp -r ${sourceDir}/* ${env.WORKSPACE}"
                  sh "ls -ltra"
                  sh "pwd"
                  sh "hostname"
                  imagename = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/sme-worker-auditoria"
                  dockerImage10 = docker.build(imagename, "-f src/SME.SGP.Auditoria.Worker/Dockerfile .")
                  }  
                }
              }

            stage('sme-worker-notificacoes') {
              agent { kubernetes { 
                  label 'builder'
                  defaultContainer 'builder'
                }
              }
              steps{
                script {
                  def jobName = URLDecoder.decode(env.JOB_NAME, 'UTF-8').replaceAll('/', '_')
                  def sourceDir = "/home/jenkins/agent/temp/${jobName}"
                  sh "cp -r ${sourceDir}/* ${env.WORKSPACE}"
                  sh "ls -ltra"
                  sh "pwd"
                  sh "hostname"
                  imagename = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/sme-worker-notificacoes"
                  dockerImage11 = docker.build(imagename, "-f src/SME.SGP.Notificacoes.Worker/Dockerfile .")
                  }  
                }
              }

            stage('sme-worker-notificacoes-hub') {
              agent { kubernetes { 
                  label 'builder'
                  defaultContainer 'builder'
                }
              }
              steps{
                script {
                  def jobName = URLDecoder.decode(env.JOB_NAME, 'UTF-8').replaceAll('/', '_')
                  def sourceDir = "/home/jenkins/agent/temp/${jobName}"
                  sh "cp -r ${sourceDir}/* ${env.WORKSPACE}"
                  sh "ls -ltra"
                  sh "pwd"
                  sh "hostname"
                  imagename = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/sme-worker-notificacoes-hub"
                  dockerImage12 = docker.build(imagename, "-f src/SME.SGP.Notificacoes.Hub/Dockerfile .")
                  }   
                }
              }
        
            stage('sme-worker-compressao') {
              agent { kubernetes { 
                  label 'builder'
                  defaultContainer 'builder'
                }
              }
              steps{
                script {
                  def jobName = URLDecoder.decode(env.JOB_NAME, 'UTF-8').replaceAll('/', '_')
                  def sourceDir = "/home/jenkins/agent/temp/${jobName}"
                  sh "cp -r ${sourceDir}/* ${env.WORKSPACE}"
                  sh "ls -ltra"
                  sh "pwd"
                  sh "hostname"
                  imagename = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/sme-worker-compressao"
                  dockerImage13 = docker.build(imagename, "-f src/SME.SGP.ComprimirArquivos.Worker/Dockerfile .")
                  }  
                }
              }

            stage('sme-worker-naapa') {
              agent { kubernetes { 
                  label 'builder'
                  defaultContainer 'builder'
                }
              }
              steps{
                script {
                  def jobName = URLDecoder.decode(env.JOB_NAME, 'UTF-8').replaceAll('/', '_')
                  def sourceDir = "/home/jenkins/agent/temp/${jobName}"
                  sh "cp -r ${sourceDir}/* ${env.WORKSPACE}"
                  sh "ls -ltra"
                  sh "pwd"
                  sh "hostname"
                  imagename = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/sme-worker-naapa"
                  dockerImage14 = docker.build(imagename, "-f src/SME.SGP.NAAPA.Worker/Dockerfile .")
                  }  
                }
              }
            }   
          }
       }
   }
